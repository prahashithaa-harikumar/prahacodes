import React, { useState } from 'react';
import { ChakraProvider, Box, Button, Heading, Text } from '@chakra-ui/react';
import CustomerData from './CustomerData';
import ProductSelection from './ProductSelection';
import FileUpload from './FileUpload';

const App = () => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    customerType: '',
    bankAccountId: '',
    fullName: '',
    dob: '',
    address: '',
    contactNumber: '',
    aadharNumber: '',
    panCardNumber: '',
    email: '',
    monthlyIncome: '',
    product: 'Silver',
    idProofFile: null,
    aadharFile: null,
    panCardFile: null,
  });

  const [errors, setErrors] = useState({});

  // Function to handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  // Function to handle customer type change and reset form if "new" is selected
  const handleCustomerTypeChange = (e) => {
    const { value } = e.target;
    if (value === 'new') {
      setFormData({
        ...formData,
        bankAccountId: '',
        fullName: '',
        dob: '',
        address: '',
        contactNumber: '',
        aadharNumber: '',
        panCardNumber: '',
        email: '',
        monthlyIncome: '',
      });
    }
    setFormData({
      ...formData,
      customerType: value,
    });
  };

  // Auto-populate form fields for existing customers based on Bank ID
  const handleAutoPopulate = (e) => {
    if (e.target.value === '123') {
      setFormData({
        ...formData,
        fullName: 'John Doe',
        dob: '1990-01-01',
        address: '123 Main St, City, Country',
        contactNumber: '9876543210',
        aadharNumber: '123412341234',
        panCardNumber: 'ABCDE1234F',
        email: 'johndoe@example.com',
        monthlyIncome: '50000',
      });
    }
  };

  // Validation function with pattern checks
  const validateForm = () => {
    let validationErrors = {};
    if (!formData.customerType) validationErrors.customerType = 'Customer Type is required';
    if (formData.customerType === 'existing' && !formData.bankAccountId)
      validationErrors.bankAccountId = 'Bank Account ID is required';
    if (!formData.fullName) validationErrors.fullName = 'Full Name is required';
    if (!formData.dob) validationErrors.dob = 'Date of Birth is required';
    if (!formData.address) validationErrors.address = 'Address is required';
    if (!formData.contactNumber) {
      validationErrors.contactNumber = 'Contact Number is required';
    } else if (!/^\d{10}$/.test(formData.contactNumber)) {
      validationErrors.contactNumber = 'Contact Number must be 10 digits';
    }
    if (!formData.aadharNumber) {
      validationErrors.aadharNumber = 'Aadhar Number is required';
    } else if (!/^\d{12}$/.test(formData.aadharNumber)) {
      validationErrors.aadharNumber = 'Aadhar Number must be 12 digits';
    }
    if (!formData.panCardNumber) {
      validationErrors.panCardNumber = 'PAN Card Number is required';
    } else if (!/[A-Z]{5}[0-9]{4}[A-Z]{1}/.test(formData.panCardNumber)) {
      validationErrors.panCardNumber = 'PAN Card Number is invalid';
    }
    if (!formData.email) {
      validationErrors.email = 'Email is required';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      validationErrors.email = 'Email format is invalid';
    }
    if (!formData.monthlyIncome) {
      validationErrors.monthlyIncome = 'Monthly Income is required';
    } else if (isNaN(formData.monthlyIncome)) {
      validationErrors.monthlyIncome = 'Monthly Income must be a number';
    }

    setErrors(validationErrors);
    return Object.keys(validationErrors).length === 0;
  };

  // Handle next button click
  const handleNext = () => {
    if (validateForm()) setStep(step + 1);
  };

  // Handle previous button click
  const handlePrevious = () => {
    setStep(step - 1);
  };

  // Handle form submission
  const handleSubmit = () => {
    if (validateForm()) {
      const dataText = `
        Customer Type: ${formData.customerType}
        Full Name: ${formData.fullName}
        Bank Account ID: ${formData.bankAccountId}
        Date of Birth: ${formData.dob}
        Address: ${formData.address}
        Contact Number: ${formData.contactNumber}
        Aadhar Number: ${formData.aadharNumber}
        PAN Card Number: ${formData.panCardNumber}
        Email: ${formData.email}
        Monthly Income: ${formData.monthlyIncome}
        Product: ${formData.product}
      `;

      const blob = new Blob([dataText], { type: 'text/plain' });
      const link = document.createElement('a');
      link.href = window.URL.createObjectURL(blob);
      link.download = 'customer_application_data.txt';
      link.click();
      alert('Form submitted and data saved as a text file!');
    }
  };

  // Handle cancel button click
  const handleCancel = () => {
    setFormData({
      customerType: '',
      bankAccountId: '',
      fullName: '',
      dob: '',
      address: '',
      contactNumber: '',
      aadharNumber: '',
      panCardNumber: '',
      email: '',
      monthlyIncome: '',
      product: 'Silver',
      idProofFile: null,
      aadharFile: null,
      panCardFile: null,
    });
    setErrors({});
    setStep(1);
  };

  return (
    <ChakraProvider>
      <Box maxW="xl" mx="auto" p={6} bg="gray.100" rounded="md" boxShadow="md">
        <Heading as="h1" mb={6} textAlign="center">
          CC Application Form
        </Heading>

        {step === 1 && (
          <CustomerData
            formData={formData}
            handleInputChange={handleInputChange}
            handleAutoPopulate={handleAutoPopulate}
            handleCustomerTypeChange={handleCustomerTypeChange}
            errors={errors}
          />
        )}
        {step === 2 && (
          <ProductSelection formData={formData} handleInputChange={handleInputChange} errors={errors} />
        )}
        {step === 3 && (
          <FileUpload formData={formData} handleInputChange={handleInputChange} errors={errors} />
        )}

        <Box mt={6} display="flex" justifyContent="space-between">
          {step > 1 && (
            <Button onClick={handlePrevious} colorScheme="gray">
              Previous
            </Button>
          )}
          {step < 3 && (
            <Button onClick={handleNext} colorScheme="blue">
              Next
            </Button>
          )}
          {step === 3 && (
            <Button onClick={handleSubmit} colorScheme="green">
              Submit
            </Button>
          )}
          {step === 3 && (
            <Button onClick={handleCancel} colorScheme="red">
              Cancel
            </Button>
          )}
        </Box>

        {Object.keys(errors).length > 0 && (
          <Text color="red.500" mt={4}>
            Please fix the errors above before proceeding.
          </Text>
        )}
      </Box>
    </ChakraProvider>
  );
};

export default App;