import React, { useState } from 'react';
import { ChakraProvider, Box, Button, Text } from '@chakra-ui/react';
import CustomerData from './components/CustomerData';
import ProductSelection from './components/ProductSelection';
import FileUpload from './components/FileUpload';

const App = () => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    bankAccountId: '',
    fullName: '',
    dob: '',
    address: '',
    contactNumber: '',
    aadharNumber: '',
    panCardNumber: '',
    email: '',
    monthlyIncome: '',
    customerType: 'new', // or 'existing'
    product: 'Silver',
    idProofFile: null,
    aadharFile: null,
    panCardFile: null,
  });

  const [errors, setErrors] = useState({});

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const validateForm = () => {
    let newErrors = {};
    // Validate for mandatory fields
    if (!formData.fullName) newErrors.fullName = 'Full Name is required';
    if (!formData.dob) newErrors.dob = 'Date of Birth is required';
    if (!formData.address) newErrors.address = 'Address is required';
    if (!formData.contactNumber) newErrors.contactNumber = 'Contact Number is required';
    if (!formData.email) newErrors.email = 'Email is required';
    if (!formData.aadharNumber) newErrors.aadharNumber = 'Aadhar Number is required';
    if (!formData.panCardNumber) newErrors.panCardNumber = 'PAN Card Number is required';
    if (!formData.monthlyIncome) newErrors.monthlyIncome = 'Monthly Income is required';
    if (formData.customerType === 'existing' && !formData.bankAccountId) newErrors.bankAccountId = 'Bank Account ID is required';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateForm()) setStep(step + 1);
  };

  const handlePrevious = () => {
    setStep(step - 1);
  };

  const handleSubmit = () => {
    if (validateForm()) {
      // Submission logic here (e.g. send data or generate file)
      alert('Form submitted successfully!');
    }
  };

  return (
    <ChakraProvider>
      <Box className="container">
        {step === 1 && (
          <CustomerData 
            formData={formData} 
            handleInputChange={handleInputChange} 
            errors={errors} 
          />
        )}
        {step === 2 && (
          <ProductSelection 
            formData={formData} 
            handleInputChange={handleInputChange} 
          />
        )}
        {step === 3 && (
          <FileUpload 
            formData={formData} 
            handleInputChange={handleInputChange} 
            errors={errors} 
          />
        )}

        <Box mt={4}>
          {step > 1 && (
            <Button onClick={handlePrevious} mr={4}>
              Previous
            </Button>
          )}
          {step < 3 && (
            <Button onClick={handleNext} colorScheme="blue">
              Next
            </Button>
          )}
          {step === 3 && (
            <Button onClick={handleSubmit} colorScheme="green">
              Submit
            </Button>
          )}
        </Box>

        {Object.keys(errors).length > 0 && (
          <Text color="red.500" mt={4}>Please fix the errors above before proceeding.</Text>
        )}
      </Box>
    </ChakraProvider>
  );
};

export default App;