import React, { useEffect } from 'react';
import { Box, FormControl, FormLabel, Input, FormErrorMessage, Select } from '@chakra-ui/react';

const CustomerData = ({ formData, handleInputChange, errors }) => {
  useEffect(() => {
    if (formData.customerType === 'new') {
      // Clear fields when switching to 'new'
      const clearedData = {
        bankId: '',
        fullName: '',
        dob: '',
        address: '',
        contactNumber: '',
        email: '',
        aadharNumber: '',
        panCardNumber: '',
        monthlyIncome: '',
      };
      Object.keys(clearedData).forEach(key => {
        handleInputChange({ target: { name: key, value: clearedData[key] } });
      });
    }
  }, [formData.customerType, handleInputChange]);

  return (
    <Box>
      <FormControl isInvalid={errors.customerType} mb={4}>
        <FormLabel>Customer Type</FormLabel>
        <Select
          name="customerType"
          value={formData.customerType}
          onChange={handleInputChange}
        >
          <option value="new">New</option>
          <option value="existing">Existing</option>
        </Select>
        <FormErrorMessage>{errors.customerType}</FormErrorMessage>
      </FormControl>

      {formData.customerType === 'existing' && (
        <>
          <FormControl isInvalid={errors.bankId} mb={4}>
            <FormLabel>Bank Account ID</FormLabel>
            <Input
              name="bankId"
              value={formData.bankId}
              onChange={handleInputChange}
              onBlur={(e) => {
                if (e.target.value === '123') {
                  // Simulate fetching data and auto-populate the form
                  handleInputChange({ target: { name: 'fullName', value: 'John Doe' } });
                  handleInputChange({ target: { name: 'dob', value: '1990-01-01' } });
                  handleInputChange({ target: { name: 'address', value: '123 Main St, City, Country' } });
                  handleInputChange({ target: { name: 'contactNumber', value: '9876543210' } });
                  handleInputChange({ target: { name: 'email', value: 'johndoe@example.com' } });
                  handleInputChange({ target: { name: 'aadharNumber', value: '123412341234' } });
                  handleInputChange({ target: { name: 'panCardNumber', value: 'ABCDE1234F' } });
                  handleInputChange({ target: { name: 'monthlyIncome', value: '50000' } });
                }
              }}
            />
            <FormErrorMessage>{errors.bankId}</FormErrorMessage>
          </FormControl>
        </>
      )}

      {formData.customerType === 'new' && (
        <>
          <FormControl isInvalid={errors.fullName} mb={4}>
            <FormLabel>Full Name</FormLabel>
            <Input
              name="fullName"
              value={formData.fullName}
              onChange={handleInputChange}
              placeholder="Full Name"
            />
            <FormErrorMessage>{errors.fullName}</FormErrorMessage>
          </FormControl>

          <FormControl isInvalid={errors.dob} mb={4}>
            <FormLabel>Date of Birth</FormLabel>
            <Input
              name="dob"
              type="date"
              value={formData.dob}
              onChange={handleInputChange}
            />
            <FormErrorMessage>{errors.dob}</FormErrorMessage>
          </FormControl>

          <FormControl isInvalid={errors.address} mb={4}>
            <FormLabel>Address</FormLabel>
            <Input
              name="address"
              value={formData.address}
              onChange={handleInputChange}
            />
            <FormErrorMessage>{errors.address}</FormErrorMessage>
          </FormControl>

          <FormControl isInvalid={errors.contactNumber} mb={4}>
            <FormLabel>Contact Number</FormLabel>
            <Input
              name="contactNumber"
              value={formData.contactNumber}
              onChange={handleInputChange}
            />
            <FormErrorMessage>{errors.contactNumber}</FormErrorMessage>
          </FormControl>

          <FormControl isInvalid={errors.email} mb={4}>
            <FormLabel>Email</FormLabel>
            <Input
              name="email"
              type="email"
              value={formData.email}
              onChange={handleInputChange}
            />
            <FormErrorMessage>{errors.email}</FormErrorMessage>
          </FormControl>

          <FormControl isInvalid={errors.aadharNumber} mb={4}>
            <FormLabel>Aadhar Number</FormLabel>
            <Input
              name="aadharNumber"
              value={formData.aadharNumber}
              onChange={handleInputChange}
            />
            <FormErrorMessage>{errors.aadharNumber}</FormErrorMessage>
          </FormControl>

          <FormControl isInvalid={errors.panCardNumber} mb={4}>
            <FormLabel>PAN Card Number</FormLabel>
            <Input
              name="panCardNumber"
              value={formData.panCardNumber}
              onChange={handleInputChange}
            />
            <FormErrorMessage>{errors.panCardNumber}</FormErrorMessage>
          </FormControl>

          <FormControl isInvalid={errors.monthlyIncome} mb={4}>
            <FormLabel>Monthly Income</FormLabel>
            <Input
              name="monthlyIncome"
              value={formData.monthlyIncome}
              onChange={handleInputChange}
            />
            <FormErrorMessage>{errors.monthlyIncome}</FormErrorMessage>
          </FormControl>
        </>
      )}
    </Box>
  );
};

export default CustomerData;