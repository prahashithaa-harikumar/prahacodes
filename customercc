import React, { useState, useEffect } from 'react';
import { Box, FormControl, FormLabel, Input, FormErrorMessage, Select } from '@chakra-ui/react';

const CustomerData = ({ formData, handleInputChange, errors, setFormData, setErrors }) => {
  const [customerType, setCustomerType] = useState('new');
  const [localFormData, setLocalFormData] = useState(formData);

  useEffect(() => {
    setLocalFormData(formData);
  }, [formData]);

  const handleCustomerTypeChange = (e) => {
    const type = e.target.value;
    setCustomerType(type);
    if (type === 'new') {
      // Clear form data for new customer
      setLocalFormData({
        ...formData,
        bankId: '',
        fullName: '',
        dob: '',
        address: '',
        email: '',
        contactNumber: '',
        aadharNumber: '',
        panCardNumber: '',
        monthlyIncome: ''
      });
    } else if (type === 'existing') {
      // Retain the form data but clear bank ID
      setLocalFormData({
        ...formData,
        bankId: '',
      });
    }
  };

  const handleBankIdBlur = (e) => {
    const bankId = e.target.value;
    if (customerType === 'existing' && bankId === '123') {
      // Simulate fetching and auto-populating data
      setLocalFormData({
        ...localFormData,
        fullName: 'John Doe',
        dob: '1990-01-01',
        address: '123 Main St, City, Country',
        email: 'johndoe@example.com',
        contactNumber: '9876543210',
        aadharNumber: '123412341234',
        panCardNumber: 'ABCDE1234F',
        monthlyIncome: '50000'
      });
    }
  };

  const handleInputChangeLocal = (e) => {
    const { name, value } = e.target;
    setLocalFormData({
      ...localFormData,
      [name]: value,
    });
    if (name in errors) {
      // Clear the specific error when input changes
      setErrors({ ...errors, [name]: '' });
    }
  };

  return (
    <Box>
      <FormControl mb={4} isInvalid={errors.customerType}>
        <FormLabel>Customer Type</FormLabel>
        <Select
          name="customerType"
          value={customerType}
          onChange={handleCustomerTypeChange}
        >
          <option value="new">New</option>
          <option value="existing">Existing</option>
        </Select>
        {errors.customerType && <FormErrorMessage>{errors.customerType}</FormErrorMessage>}
      </FormControl>

      {customerType === 'existing' && (
        <>
          <FormControl mb={4} isInvalid={errors.bankId}>
            <FormLabel>Bank Account ID</FormLabel>
            <Input
              name="bankId"
              value={localFormData.bankId}
              onChange={handleInputChangeLocal}
              onBlur={handleBankIdBlur}
            />
            {errors.bankId && <FormErrorMessage>{errors.bankId}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.fullName}>
            <FormLabel>Full Name</FormLabel>
            <Input
              name="fullName"
              value={localFormData.fullName}
              onChange={handleInputChangeLocal}
              isDisabled={!localFormData.bankId} // Enable after Bank ID is entered
            />
            {errors.fullName && <FormErrorMessage>{errors.fullName}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.dob}>
            <FormLabel>Date of Birth</FormLabel>
            <Input
              name="dob"
              type="date"
              value={localFormData.dob}
              onChange={handleInputChangeLocal}
              isDisabled={!localFormData.bankId} // Enable after Bank ID is entered
            />
            {errors.dob && <FormErrorMessage>{errors.dob}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.address}>
            <FormLabel>Address</FormLabel>
            <Input
              name="address"
              value={localFormData.address}
              onChange={handleInputChangeLocal}
              isDisabled={!localFormData.bankId} // Enable after Bank ID is entered
            />
            {errors.address && <FormErrorMessage>{errors.address}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.contactNumber}>
            <FormLabel>Contact Number</FormLabel>
            <Input
              name="contactNumber"
              value={localFormData.contactNumber}
              onChange={handleInputChangeLocal}
              pattern="\d{10}"
              title="Contact Number must be 10 digits"
              isDisabled={!localFormData.bankId} // Enable after Bank ID is entered
            />
            {errors.contactNumber && <FormErrorMessage>{errors.contactNumber}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.aadharNumber}>
            <FormLabel>Aadhar Number</FormLabel>
            <Input
              name="aadharNumber"
              value={localFormData.aadharNumber}
              onChange={handleInputChangeLocal}
              pattern="\d{12}"
              title="Aadhar Number must be 12 digits"
              isDisabled={!localFormData.bankId} // Enable after Bank ID is entered
            />
            {errors.aadharNumber && <FormErrorMessage>{errors.aadharNumber}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.panCardNumber}>
            <FormLabel>PAN Card Number</FormLabel>
            <Input
              name="panCardNumber"
              value={localFormData.panCardNumber}
              onChange={handleInputChangeLocal}
              pattern="[A-Z]{5}[0-9]{4}[A-Z]{1}"
              title="PAN Card Number must be in format: AAAAA1234A"
              isDisabled={!localFormData.bankId} // Enable after Bank ID is entered
            />
            {errors.panCardNumber && <FormErrorMessage>{errors.panCardNumber}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.monthlyIncome}>
            <FormLabel>Monthly Income</FormLabel>
            <Input
              name="monthlyIncome"
              type="number"
              value={localFormData.monthlyIncome}
              onChange={handleInputChangeLocal}
              isDisabled={!localFormData.bankId} // Enable after Bank ID is entered
            />
            {errors.monthlyIncome && <FormErrorMessage>{errors.monthlyIncome}</FormErrorMessage>}
          </FormControl>
        </>
      )}

      {customerType === 'new' && (
        <>
          <FormControl mb={4} isInvalid={errors.fullName}>
            <FormLabel>Full Name</FormLabel>
            <Input
              name="fullName"
              value={localFormData.fullName}
              onChange={handleInputChangeLocal}
              placeholder="Full Name"
              pattern="^[a-zA-Z\s]+$"
              title="Full Name must contain only letters and spaces"
            />
            {errors.fullName && <FormErrorMessage>{errors.fullName}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.dob}>
            <FormLabel>Date of Birth</FormLabel>
            <Input
              name="dob"
              type="date"
              value={localFormData.dob}
              onChange={handleInputChangeLocal}
            />
            {errors.dob && <FormErrorMessage>{errors.dob}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.address}>
            <FormLabel>Address</FormLabel>
            <Input
              name="address"
              value={localFormData.address}
              onChange={handleInputChangeLocal}
            />
            {errors.address && <FormErrorMessage>{errors.address}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.email}>
            <FormLabel>Email</FormLabel>
            <Input
              name="email"
              type="email"
              value={localFormData.email}
              onChange={handleInputChangeLocal}
            />
            {errors.email && <FormErrorMessage>{errors.email}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.contactNumber}>
            <FormLabel>Contact Number</FormLabel>
            <Input
              name="contactNumber"
              value={localFormData.contactNumber}
              onChange={handleInputChangeLocal}
              pattern="\d{10}"
              title="Contact Number must be 10 digits"
            />
            {errors.contactNumber && <FormErrorMessage>{errors.contactNumber}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.aadharNumber}>
            <FormLabel>Aadhar Number</FormLabel>
            <Input
              name="aadharNumber"
              value={localFormData.aadharNumber}
              onChange={handleInputChangeLocal}
              pattern="\d{12}"
              title="Aadhar Number must be 12 digits"
            />
            {errors.aadharNumber && <FormErrorMessage>{errors.aadharNumber}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.panCardNumber}>
            <FormLabel>PAN Card Number</FormLabel>
            <Input
              name="panCardNumber"
              value={localFormData.panCardNumber}
              onChange={handleInputChangeLocal}
              pattern="[A-Z]{5}[0-9]{4}[A-Z]{1}"
              title="PAN Card Number must be in format: AAAAA1234A"
            />
            {errors.panCardNumber && <FormErrorMessage>{errors.panCardNumber}</FormErrorMessage>}
          </FormControl>
          <FormControl mb={4} isInvalid={errors.monthlyIncome}>
            <FormLabel>Monthly Income</FormLabel>
            <Input
              name="monthlyIncome"
              type="number"
              value={localFormData.monthlyIncome}
              onChange={handleInputChangeLocal}
            />
            {errors.monthlyIncome && <FormErrorMessage>{errors.monthlyIncome}</FormErrorMessage>}
          </FormControl>
        </>
      )}
    </Box>
  );
};

export default CustomerData;