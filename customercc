import React, { useState } from 'react';
import { Box, FormControl, FormLabel, Input, Select, Text } from '@chakra-ui/react';

const CustomerData = ({ formData, handleInputChange, setFormData, errors }) => {
  const [isExistingCustomer, setIsExistingCustomer] = useState(false);

  const handleCustomerTypeChange = (e) => {
    const value = e.target.value;
    handleInputChange(e);
    if (value === 'existing') {
      setIsExistingCustomer(true);
      // Auto-populate fields with mock data for an existing customer with bankId "123"
      if (formData.bankId === '123') {
        setFormData({
          ...formData,
          fullName: 'John Doe',
          dob: '1990-01-01',
          address: '123 Main St',
          email: 'johndoe@example.com',
          contactNumber: '1234567890',
          aadharNumber: '1234-5678-9012',
          panCardNumber: 'ABCDE1234F',
          monthlyIncome: '50000',
        });
      }
    } else {
      setIsExistingCustomer(false);
      // Clear fields for new customer input
      setFormData({
        customerType: 'new',
        bankId: '',
        fullName: '',
        dob: '',
        address: '',
        email: '',
        contactNumber: '',
        aadharNumber: '',
        panCardNumber: '',
        monthlyIncome: '',
      });
    }
  };

  return (
    <Box>
      <FormControl mb={4} isRequired>
        <FormLabel>Customer Type</FormLabel>
        <Select name="customerType" value={formData.customerType} onChange={handleCustomerTypeChange}>
          <option value="new">New</option>
          <option value="existing">Existing</option>
        </Select>
        {errors.customerType && <Text color="red.500">{errors.customerType}</Text>}
      </FormControl>

      {isExistingCustomer && (
        <FormControl mb={4} isRequired>
          <FormLabel>Bank ID</FormLabel>
          <Input name="bankId" value={formData.bankId} onChange={handleInputChange} />
          {errors.bankId && <Text color="red.500">{errors.bankId}</Text>}
        </FormControl>
      )}

      {(!isExistingCustomer || formData.bankId === '123') && (
        <>
          <FormControl mb={4} isRequired>
            <FormLabel>Full Name</FormLabel>
            <Input name="fullName" value={formData.fullName} onChange={handleInputChange} />
            {errors.fullName && <Text color="red.500">{errors.fullName}</Text>}
          </FormControl>

          <FormControl mb={4} isRequired>
            <FormLabel>Date of Birth</FormLabel>
            <Input type="date" name="dob" value={formData.dob} onChange={handleInputChange} />
            {errors.dob && <Text color="red.500">{errors.dob}</Text>}
          </FormControl>

          <FormControl mb={4} isRequired>
            <FormLabel>Address</FormLabel>
            <Input name="address" value={formData.address} onChange={handleInputChange} />
            {errors.address && <Text color="red.500">{errors.address}</Text>}
          </FormControl>

          <FormControl mb={4} isRequired>
            <FormLabel>Email</FormLabel>
            <Input type="email" name="email" value={formData.email} onChange={handleInputChange} />
            {errors.email && <Text color="red.500">{errors.email}</Text>}
          </FormControl>

          <FormControl mb={4} isRequired>
            <FormLabel>Contact Number</FormLabel>
            <Input name="contactNumber" value={formData.contactNumber} onChange={handleInputChange} />
            {errors.contactNumber && <Text color="red.500">{errors.contactNumber}</Text>}
          </FormControl>

          <FormControl mb={4} isRequired>
            <FormLabel>Aadhar Number</FormLabel>
            <Input name="aadharNumber" value={formData.aadharNumber} onChange={handleInputChange} />
            {errors.aadharNumber && <Text color="red.500">{errors.aadharNumber}</Text>}
          </FormControl>

          <FormControl mb={4} isRequired>
            <FormLabel>PAN Card Number</FormLabel>
            <Input name="panCardNumber" value={formData.panCardNumber} onChange={handleInputChange} />
            {errors.panCardNumber && <Text color="red.500">{errors.panCardNumber}</Text>}
          </FormControl>

          <FormControl mb={4} isRequired>
            <FormLabel>Monthly Income</FormLabel>
            <Input name="monthlyIncome" value={formData.monthlyIncome} onChange={handleInputChange} />
            {errors.monthlyIncome && <Text color="red.500">{errors.monthlyIncome}</Text>}
          </FormControl>
        </>
      )}
    </Box>
  );
};

export default CustomerData;