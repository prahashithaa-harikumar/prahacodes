import React, { useState } from "react";
import { FormControl, FormLabel, Select, Input, Spinner, VStack, Button } from "@chakra-ui/react";
import axios from "axios";

const CreditForm = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [selectedProductId, setSelectedProductId] = useState("");
  const [displayData, setDisplayData] = useState({
    usage: "",
    affiliation: "",
    card_type: "",
    card_limit: "",
    transfer_amount: "",
    valid_upto: "",
    balance_transfer: "",
    effective_rate: "",
  });

  const [formData, setFormData] = useState({
    product: "", // Only saving product type
  });

  // Handle product selection
  const handleProductChange = async (e) => {
    const selectedProductId = e.target.value;
    setSelectedProductId(selectedProductId);
    setFormData({ product: selectedProductId }); // Only save product type for form submission

    setIsLoading(true); // Show spinner while loading

    try {
      // Fetch product details from the backend
      const response = await axios.get(`http://localhost:8080/api/project/product/${selectedProductId}`);
      
      // Update the display data with fetched product details
      setDisplayData({
        usage: response.data.usage,
        affiliation: response.data.affiliation,
        card_type: response.data.card_type,
        card_limit: response.data.card_limit,
        transfer_amount: response.data.transfer_amount,
        valid_upto: response.data.valid_upto,
        balance_transfer: response.data.balance_transfer,
        effective_rate: response.data.effective_rate,
      });
    } catch (error) {
      console.error("Error fetching product details", error);
    } finally {
      setIsLoading(false); // Hide spinner when done
    }
  };

  // Handle form submission (only submitting the product type)
  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Form submitted with product type:", formData.product);
    
    // You can make a POST request or handle the form submission logic here
    // axios.post('/api/project/submit', formData);
  };

  return (
    <VStack spacing={4} as="form" onSubmit={handleSubmit}>
      {/* Dropdown to select product */}
      <FormControl id="product">
        <FormLabel>Product</FormLabel>
        <Select placeholder="Select product" onChange={handleProductChange}>
          <option value="silver">Silver</option>
          <option value="gold">Gold</option>
          <option value="platinum">Platinum</option>
        </Select>
      </FormControl>

      {/* Show Spinner while loading */}
      {isLoading ? (
        <Spinner />
      ) : (
        <>
          {/* Display product details */}
          <FormControl id="usage">
            <FormLabel>Usage</FormLabel>
            <Input value={displayData.usage || ""} readOnly />
          </FormControl>

          <FormControl id="affiliation">
            <FormLabel>Affiliation</FormLabel>
            <Input value={displayData.affiliation || ""} readOnly />
          </FormControl>

          <FormControl id="card_type">
            <FormLabel>Card Type</FormLabel>
            <Input value={displayData.card_type || ""} readOnly />
          </FormControl>

          <FormControl id="card_limit">
            <FormLabel>Card Limit</FormLabel>
            <Input value={displayData.card_limit || ""} readOnly />
          </FormControl>

          <FormControl id="transfer_amount">
            <FormLabel>Transfer Amount</FormLabel>
            <Input value={displayData.transfer_amount || ""} readOnly />
          </FormControl>

          <FormControl id="valid_upto">
            <FormLabel>Valid Upto</FormLabel>
            <Input value={displayData.valid_upto || ""} readOnly />
          </FormControl>

          <FormControl id="balance_transfer">
            <FormLabel>Balance Transfer</FormLabel>
            <Input value={displayData.balance_transfer || ""} readOnly />
          </FormControl>

          <FormControl id="effective_rate">
            <FormLabel>Effective Rate</FormLabel>
            <Input value={displayData.effective_rate || ""} readOnly />
          </FormControl>
        </>
      )}

      {/* Submit button */}
      <Button type="submit" colorScheme="teal">
        Save Product Type
      </Button>
    </VStack>
  );
};

export default CreditForm;