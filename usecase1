
  const toast = useToast();

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  // Mandatory field validation function
  const validateMandatoryFields = () => {
    const mandatoryFields = [
      { field: 'fullName', message: 'Full Name is required' },
      { field: 'dob', message: 'Date of Birth is required' },
      { field: 'address', message: 'Address is required' },
      { field: 'email', message: 'Email is required' },
      { field: 'contactNumber', message: 'Contact Number is required' },
      { field: 'aadharNumber', message: 'Aadhaar Number is required' },
      { field: 'panCardNumber', message: 'PAN Card Number is required' },
      { field: 'monthlyIncome', message: 'Monthly Income is required' },
      { field: 'bankAccountId', message: 'Bank Account ID is required' },
    ];

    for (let i = 0; i < mandatoryFields.length; i++) {
      const { field, message } = mandatoryFields[i];
      if (!formData[field]) {
        toast({ title: message, status: 'error', duration: 3000 });
        return false;
      }
    }
    return true;
  };

  // Pattern validation function
  const validatePatterns = () => {
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const contactPattern = /^[6-9]\d{9}$/;
    const aadharPattern = /^\d{12}$/;
    const panPattern = /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/;
    const bankAccountPattern = /^\d{8}$/;

    if (!emailPattern.test(formData.email)) {
      toast({ title: 'Invalid Email format', status: 'error', duration: 3000 });
      return false;
    }
    if (!contactPattern.test(formData.contactNumber)) {
      toast({ title: 'Invalid Contact Number format', status: 'error', duration: 3000 });
      return false;
    }
    if (!aadharPattern.test(formData.aadharNumber)) {
      toast({ title: 'Invalid Aadhaar Number format', status: 'error', duration: 3000 });
      return false;
    }
    if (!panPattern.test(formData.panCardNumber)) {
      toast({ title: 'Invalid PAN Card Number format', status: 'error', duration: 3000 });
      return false;
    }
    if (isNaN(formData.monthlyIncome) || parseFloat(formData.monthlyIncome) <= 0) {
      toast({ title: 'Monthly Income must be a valid number', status: 'error', duration: 3000 });
      return false;
    }
    if (!bankAccountPattern.test(formData.bankAccountId)) {
      toast({ title: 'Bank Account ID must be exactly 8 digits', status: 'error', duration: 3000 });
      return false;
    }

    return true;
  };

  // Form validation handler
  const validateForm = () => {
    if (!validateMandatoryFields()) {
      return false;
    }
    if (!validatePatterns()) {
      return false;
    }

    toast({ title: 'Form Submitted Successfully', status: 'success', duration: 3000 });
    return true;
  };
